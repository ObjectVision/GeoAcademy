container Evaluation : Descr = "This container contains several evaluation indicators for simulation results"
{
	container Total
	{
		container CurrentLanduse :=
			for_each_nedv(
				  LandUse_Endogeneous/Name
				, 'sum(orglanduse/'+LandUse_Endogeneous/Name+')'
				, void
				, claimHa
			), Descr = "Total current land use";

		container TotalDemand :=
			for_each_nedv(
				  LandUse_Endogeneous/Name
				, 'sum(CaseData/TotalPeriodClaims/'+LandUse_Endogeneous/Name+')'
				, void
				, claimHa
			), Descr = "Total Demand";

		container AllocatedLanduse :=
			for_each_nedv(
				  LandUse_Endogeneous/Name
				, 'sum(results/Endogenous/'+LandUse_Endogeneous/Name+')'
				, void
				, claimHa
			), Descr = "Total landuse after allocation";

		container DemandRealisation :=
			for_each_nedv(
				  LandUse_Endogeneous/Name
				, '(AllocatedLanduse/'+LandUse_Endogeneous/Name+' / TotalDemand/'+LandUse_Endogeneous/Name+')'
				, void
				, float32
			), Descr = "Degree to which initial demand is allocated";
	}
	container Regional
	{
		container CurrentLanduse :=
			for_each_nedv(
				  LandUse_Endogeneous/Name
				, 'sum(orglanduse/'+LandUse_Endogeneous/Name+', Input/AggRegio/per_grid)'
				, Input/AggRegio
				, claimHa
			), Descr = "Total current land use";

		container Demand :=
			for_each_nedv(
				  LandUse_Endogeneous/Name
				, 'CaseData/TotalPeriodClaims/'+LandUse_Endogeneous/Name
				, Input/AggRegio
				, claimHa
			), Descr = "Total land demand";

		container AllocatedLanduse :=
			for_each_nedv(
				  LandUse_Endogeneous/Name
				, 'sum(results/Endogenous/'+LandUse_Endogeneous/Name+', Input/AggRegio/per_grid)'
				, Input/AggRegio
				, claimHa
			), Descr = "Total allocated land use";

		container DemandRealisation :=
			for_each_nedv(
				  LandUse_Endogeneous/Name
				, '(AllocatedLanduse/'+LandUse_Endogeneous/Name+' / Demand/'+LandUse_Endogeneous/Name+')'
				, Input/AggRegio
				, ratio
			), Descr = "Degree to which initial demand is allocated";
	}
	
	container Local
	{
		container DifferenceMaps :=
			for_each_nedv(
				  LandUse_Endogeneous/Name
				, '(results/Endogenous/'+LandUse_Endogeneous/Name+' - orglanduse/'+LandUse_Endogeneous/Name+')'
				, NL_grid/domain
				, Ha
			), Descr = "Difference allocation - current landuse";

		container Urbanisation : Descr = "Built-up surface per gridcel"
		{
			attribute<Ha>          Builtup_Surface            (NL_grid/domain) := ='add('+asItemList(Landuse_Urban/IsExogeneous ? 'Results/Exogenous/' +Landuse_Urban/Name : 'results/Endogenous/' +Landuse_Urban/Name)+')';
			attribute<bool>        Builtup_Area               (NL_grid/domain) := Builtup_Surface > 15[Ha];
			attribute<Ha>          Builtup_Surface_current    (NL_grid/domain) := ='add_list('+asItemList('orglanduse/' + Landuse_Urban/Name)+')';
			attribute<bool>        Builtup_Area_current       (NL_grid/domain) := Builtup_Surface_current > 15[Ha];
			attribute<Ha>          Difference_Builtup_Surface (NL_grid/domain) := Urbanisation/Builtup_Surface - Urbanisation/Builtup_Surface_current;
			attribute<LossOrGain>  Difference_Builtup_Area    (NL_grid/domain) := Urbanisation/Builtup_Area[LossOrGain]- Urbanisation/Builtup_Area_current[LossOrGain];

			unit<uint32> DenseAreas := district(uint8(Builtup_Area))
			{
				attribute<DenseAreas> Districts (NL_grid/domain);
				attribute<Ha>         Size      (DenseAreas) := float32(pcount(Districts)) * 25[Ha];
				attribute<bool>       IsBuiltup (DenseAreas) := modus(Urbanisation/Builtup_Area, Districts);
			}
			
			unit<uint32> BuiltupAreas:= subset(DenseAreas/IsBuiltup)
			{
				attribute<Ha> Size(BuiltupAreas) := DenseAreas/Size[nr_OrgEntity];
			}
			
			attribute<Ha> DenseAreasSizePerCel (NL_grid/domain) := DenseAreas/Size[DenseAreas/Districts] , cdf = "Classifications/Districts4K/Classes" , Label = "Size Dense Area";
			attribute<Ha> BuiltupAreasSizePerCel (NL_grid/domain) := Builtup_Area ? DenseAreasSizePerCel : value (0, Ha), cdf   = "Classifications/Districts4K/Classes" , Label = "Size Built-up Area";

			unit<uint32> DenseAreas_current := district(uint8(Builtup_Area_current))
			{
				attribute<DenseAreas> Districts (NL_grid/domain);
				attribute<Ha>         Size      (DenseAreas_current) := float32(pcount(Districts)) * 25[Ha];
				attribute<bool>       IsBuiltup (DenseAreas_current) := modus(Urbanisation/Builtup_Area_current, Districts);
			}
			unit<uint32> BuiltupAreas_current := subset(DenseAreas_current/IsBuiltup)
			{
				attribute<Ha> Size (BuiltupAreas_current) := DenseAreas_current/Size[nr_OrgEntity];
			}
			attribute<Ha> DenseAreas_current_SizePerCel   (NL_grid/domain) := DenseAreas_current/Size[DenseAreas_current/Districts], cdf = "Classifications/Districts4K/Classes", Label = "Size Dense Area";
			attribute<Ha> BuiltupAreas_current_SizePerCel (NL_grid/domain) := Builtup_Area_current ? DenseAreas_current_SizePerCel : 0[Ha], cdf = "Classifications/Districts4K/Classes", Label = "Size Built-up Area";

			parameter <Ha> AvgSizeBuiltupAreas        := mean(BuiltupAreas/Size);
			parameter <Ha> AvgSizeBuiltupAreas_curent := mean(BuiltupAreas_current/Size);
		}
	}
}