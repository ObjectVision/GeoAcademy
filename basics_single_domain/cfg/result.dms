container basics_single_domain_result
{
	// Values units
	unit<float32> nr_inh    := baseunit('inhabitants', float32);
	unit<float32> m         := baseunit('meter', float32);
	unit<float32> m2        := m * m;
	unit<float32> ha        := 10000f * m2;
	unit<float32> nr_inh_m2 := nr_inh / m2;
	unit<float32> nr_inh_ha := nr_inh / ha;

	container Geography // Define the extend of the scene and the projection 
	{
		unit<fpoint> rdc_base : format = "EPSG:28992", DialogData = "ngr_layer";               // Rijksdriehoekstelsel, a 2D cartesian coordinate system for the netherlands
		unit<fpoint> rdc      := range(rdc_base, point(0f, 300000f), point(280000f, 625000f)); // Define a 2D range consisting of 2D cartesian coordinates, later used for the "province" domain unit geometry attribute

		#include<ngr_layer.dms>                                                                // Tiles for background layer
	}

	container SourceData
	{
		unit<uint32> province                                // Domain unit province, dimensions and attributes allocated based on the "provincie.shp" file:
		:	StorageName     = "%ProjDir%/Data/provincie.shp" // Path to shapefile (2D spatial dataset + N attributes)
		,	StorageType     = "gdal.vect"                    // Type of file to read
		,	StorageReadOnly = "True"                         // We will not be editting the underlying shapefile
		{
			attribute<Geography/rdc> geometry (poly);        // Obtained from the "provincie.shp" geometry
			attribute<string>        naam;                   // Obtained from "provincie.dbf [NAAM]"
			attribute<string>        label := naam;
			attribute<nr_inh>        inwoners;               // Obtained from "provincie.dbf [INWONERS]"
		}
	}

	container Results: Using = "SourceData"
	{	// Values types      attribute name                 domain unit (dimensions of table)
		attribute<uint32>    nr_capital_per_province        (province) := const(1, province);                  // A table of domain unit province [12x1] with the number of capitals residing in that province, which is always 1, hence the const operator
		attribute<string>    province_code                  (province) := uppercase(left(province/naam, 2));   // Short province code consisting of the first 2 letters in upper case of each province name
		attribute<bool>      has_more_than_1mln_inhabitants (province) := province/inwoners > 1000000[nr_inh]; // Check for each province if its inhabitants are larger than 1 milion inhabitants

		// Values units
		attribute<m2>        area                           (province) := area(province/geometry, m2);         // Calculate the area of each province given the geometry as value unit m2
		attribute<nr_inh_m2> inhabitants_per_m2             (province) := province/inwoners / area;            // Calculate the amount of inhabitants per m2 
		attribute<nr_inh_ha> inhabitants_per_ha             (province) := inhabitants_per_m2[nr_inh_ha];       // Express the number of inhabitants per ha using the defined nr_inh_ha value unit
	}
}