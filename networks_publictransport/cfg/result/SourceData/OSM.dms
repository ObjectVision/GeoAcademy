// container OSM
// {
	// unit<uint32> OSM_fss 
	// :	StorageName = "= '%ProjDir%/Data/Pedestrian_network_20200117.fss'"
	// ,	StorageReadOnly = "true"
	// {
		// attribute<geometries/rdc>               line     (arc);
		// attribute<geometries/rdc>               geometry (arc) := bg_simplify_linestring(line, 2.0);
		// attribute<classifications/OSM/wegtype>  wegtype;
		
		// attribute<bool> IsRandstad := any(seq2point_simpl/IsRandstad, seq2point_simpl/SequenceNr);
		
		// attribute<bool> NotUsefull_pedestrianpaths := wegtype == /Classifications/osm/wegtype/V/cycleway
														// || wegtype == /Classifications/osm/wegtype/V/service
														// || wegtype == /Classifications/osm/wegtype/V/primary;
		// unit<uint32> seq2point_simpl := sequence2points(geometry)
		// {
			// attribute<bool> IsRandstad := IsDefined(point_in_polygon(point, /SourceData/RegioIndelingen/Read_Provincie_GML/sub/geometry));
		// }
		
		// unit<uint32> sub := subset(IsRandstad && !NotUsefull_pedestrianpaths)
		// {
			// attribute<geometries/rdc>               geometry (arc) := ../geometry[nr_OrgEntity];
			// attribute<classifications/OSM/wegtype>  wegtype:= ../wegtype[nr_OrgEntity];
		// }
	// }
		
	// unit<uint32> OSM_gpkg := OSM_fss/sub
	// ,	StorageName = "= '%ProjDir%/Data/Pedestrian_network_20200117.gpkg'"
	// , StorageType = "gdalwrite.vect"
	// {
		// attribute<geometries/rdc>               geometry (arc) := OSM_fss/sub/geometry;
		// attribute<classifications/OSM/wegtype>  wegtype := OSM_fss/sub/wegtype;
		
	unit<uint32> OSM
	:	StorageName = "= '%SourceDataDir%/GeoDMS_Academy/Pedestrian_network_20200117.gpkg'"
	,	StorageType = "gdal.vect"
	,	StorageReadOnly = "true"
	,	SyncMode = "alltables"
	{
		attribute<geometries/rdc>               geometry (arc);
		attribute<classifications/OSM/wegtype>  wegtype;
		attribute<string>                       wegtype_label := /Classifications/osm/wegtype/Label[wegtype];
		
		attribute<float32>                      length        := arc_length(geometry, float32);
		
		container MakeConnectedRoads
		{
			unit <uint32> LinkSet := arc2segm(../geometry) 
			,	DialogData = "segments"
			,	DialogType = "Map"
			{
				attribute<m>                             lengte        := arc_length(segments, m);
				attribute<bool>                          isConnected   := all(pointset/isConnected, pointset/ArcID);

				unit<uint32> pointset := Union_Unit(LinkSet, LinkSet)
				{
					attribute<geometries/rdc>   point        := Union_Data(pointset, LinkSet/point, LinkSet/nextpoint);
					attribute<bool>             isConnected  := isNull(rlookup(point, NodesNotConnected/point));
					attribute<OSM>            roadsnr      := Union_Data(pointset, LinkSet/SequenceNr, LinkSet/SequenceNr);
					attribute<LinkSet>          ArcID        := value(ID(pointset) % nrofrows(LinkSet), LinkSet);
					attribute<uint32>           VolgNr       := ID(pointset) / nrofrows(LinkSet);
				}
				attribute<geometries/rdc> segments(arc) := points2sequence(pointset/point, pointset/ArcID, pointset/VolgNr);
			}
			unit<uint32> NodeSet := unique(LinkSet/pointset/point)
			,	DialogData = "Values"
			,	DialogType = "Map"
			{
				attribute<geometries/rdc>   Values;
				attribute<Linkset>          LinkSetnr := rlookup(Values, LinkSet/point);
				attribute<Lines>            roadsnr := LinkSet/SequenceNr[LinkSetnr];
			}
			attribute<NodeSet> F1 (LinkSet)  := rlookup(LinkSet/point,     NodeSet/Values);
			attribute<NodeSet> F2 (LinkSet)  := rlookup(LinkSet/nextpoint, NodeSet/Values);

			unit<uint32> networks := connected_parts(F1, F2)
			{
				attribute<uint32>   nr_nodes    := sum(const(1, NodeSet, uint32), partnr);
				attribute<float32>  Lengte      := sum(LinkSet/lengte[NodeSet/LinkSetnr], partnr);
				parameter<uint32>   MaxNrNodex  := max(networks/nr_nodes);
				parameter<networks> main        := rlookup(MaxNrNodex, nr_nodes); // we gaan ervan uit dat het netwerk met de meeste nodes het hoofd netwerk is
			}
			unit<uint32> NodesNotConnected := select_with_org_rel(networks/partnr <> networks/main)
			{
				attribute<geometries/rdc> point := NodeSet/Values[org_rel];
			}
		}
		
		unit<uint32> result := select_with_org_rel(MakeConnectedRoads/Linkset/isConnected)
		{
			attribute<geometries/rdc>         geometry (arc)                := MakeConnectedRoads/Linkset/Segments[org_rel];
			attribute<float32>                length                        := arc_length(geometry, float32);
		}
	}
 // }