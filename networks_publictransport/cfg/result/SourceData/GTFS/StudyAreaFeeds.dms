container StudyAreaFeeds 
{ 
	unit<uint32> Stops := LoadFeeds/Stops
	, DialogData = "point"
	, DialogType = "map" 
	, FreeData = "false"
	, StoreData = "true"
	{
		attribute<geometries/rdc> point       := LoadFeeds/Stops/point;
		attribute<uint32>	orgStopId   := id(LoadFeeds/Stops);
		attribute<uint32> 	feedId      := const(0, LoadFeeds/Stops, uint32);
		attribute<upoint>	uni_StopId  := point(feedId, orgStopId, upoint);
		attribute<string>	Name        := LoadFeeds/Stops/stop_name;
		attribute<string> 	LabelText   := Name, DialogType = "LabelText";
		
		unit<uint32> uq_points := unique(point)
		{
			attribute<float32>  x           := PointCol(values);
			attribute<float32>  y           := PointRow(values);
		}
		
		attribute<StopsGrid> GridId       := point[StopsGrid];
		attribute<uint32>    Grid1D       := StopsGrid/uniId[GridId];
		attribute<uint32>    cumu_in_grid := cumulate(const(1,.,uint32), GridId) - 1;
		attribute<upoint>    unique_id    := point(cumu_in_grid, Grid1D, upoint);
		attribute<uint32>    nTransfers   := StopsGrid/nTransfers[GridId];
		
		unit<spoint> StopsGrid := MakeStopsGrid/StopsGrid
		{
			attribute<uint32> nStops     := pcount(GridId);
			attribute<uint32> nTransfers := nTop + nRight + nBottom + nLeft + (nStops - 1);
			attribute<uint32> nTop       := potential(float32(nStops), float32(Templates/Neighbourhood/Top))[uint32];
			attribute<uint32> nRight     := potential(float32(nStops), float32(Templates/Neighbourhood/Right))[uint32];
			attribute<uint32> nBottom    := potential(float32(nStops), float32(Templates/Neighbourhood/Bottom))[uint32];
			attribute<uint32> nLeft      := potential(float32(nStops), float32(Templates/Neighbourhood/Left))[uint32];
			attribute<uint32> uniId      := cumulate(const(1,.,uint32))-1;
		}
		
		container MakeStopsGrid 
		{
			parameter<geometries/rdc> bottomleft := point(min(pointCol(point)), min(PointRow(point)), geometries/rdc);
			parameter<geometries/rdc>	upperright := point(max(pointCol(point)), max(PointRow(point)), geometries/rdc);
			parameter<geometries/rdc>	resolution := point((ModelParameters/MaxTransferDistKm) * 0.5f, (ModelParameters/MaxTransferDistKm) * 0.5f, geometries/rdc);
			parameter<spoint>   size       := spoint((upperright - bottomleft) / resolution) + point(1s, 1s, spoint);
		
			unit<spoint> StopsGrid := range(gridset(geometries/rdc, resolution, bottomleft, wpoint), point(0s, 0s), size)
			{
			}
		}
	}
	
	unit<uint32> Links := LoadFeeds/ScheduledLinks
	, DialogData = "Line"
	, DialogType = "map" 
	, FreeData = "false"
	, StoreData = "true"
	{
		attribute<geometries/rdc>	Line (arc):			 = LoadFeeds/ScheduledLinks/Line;
		attribute<uint32>	feedId:				 = const(0, LoadFeeds/ScheduledLinks, uint32);
		attribute<uint32> 	OrgfromStop:		 = LoadFeeds/ScheduledLinks/fromStop;
		attribute<uint32>	OrgtoStop:			 = LoadFeeds/ScheduledLinks/toStop;
		attribute<Time> 	depTime: 			 = LoadFeeds/ScheduledLinks/depTime;
		attribute<Time> 	arrTime: 			 = LoadFeeds/ScheduledLinks/arrTime;
		attribute<ModesList/List> 	Mode:				 = LoadFeeds/ScheduledLinks/Mode;
		attribute<Stops>	FromStop:			 = rlookup(uni_fStopId, Stops/uni_StopId);
		attribute<Stops>	ToStop:				 = rlookup(uni_tStopId, Stops/uni_StopId);
		attribute<upoint>	uni_fStopId:		 = point(feedId, OrgfromStop, upoint);
		attribute<upoint>	uni_tStopId:		 = point(feedId, OrgtoStop, upoint);	
	}
}
