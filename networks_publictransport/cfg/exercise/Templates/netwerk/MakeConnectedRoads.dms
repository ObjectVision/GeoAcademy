container MakeConnectedRoads
{ 
	unit <uint32> LinkSet := arc2segm(roads)
	,	DialogData = "segments"
	,	DialogType = "Map"
	{
		attribute<classifications/OSM/wegtype>   wegtype          := roadDomain/wegtype[SequenceNr];
		attribute<km_hr>                         MorningRush_speed:= roadDomain/congestion_speed_MorningRush[SequenceNr];
		attribute<float32>                       MorningRush_flow := roadDomain/congestion_flow_MorningRush[SequenceNr];
		attribute<km_hr>                         maxspeed         := value(roadDomain/maxspeed, km_hr)[SequenceNr];
		attribute<km_hr>                         NoonRush_speed  := roadDomain/congestion_speed_NoonRush[SequenceNr];
		attribute<float32>                       NoonRush_flow   := roadDomain/congestion_flow_NoonRush[SequenceNr];
		attribute<bool>                          isConnected      := all(pointset/isConnected, pointset/ArcID);

		unit<uint32> pointset := Union_Unit(LinkSet, LinkSet)
		{
			attribute<geometries/rdc>   point        := Union_Data(pointset, LinkSet/point, LinkSet/nextpoint);
			attribute<bool>             isConnected  := isNull(rlookup(point, NodesNotConnected/point));
			attribute<LinkSet>          ArcID        := value(ID(pointset) % nrofrows(LinkSet), LinkSet);
			attribute<uint32>           VolgNr       := ID(pointset) / nrofrows(LinkSet);
		}
		attribute<geometries/rdc> segments(arc) := points2sequence(pointset/point, pointset/ArcID, pointset/VolgNr);
	}
	unit<uint32> NodeSet := unique(LinkSet/pointset/point)
	,	DialogData = "Values"
	,	DialogType = "Map"
	{
	}
	attribute<NodeSet> F1(LinkSet)  := rlookup(LinkSet/point,     NodeSet/Values);
	attribute<NodeSet> F2(LinkSet)  := rlookup(LinkSet/nextpoint, NodeSet/Values);

	unit<uint32> networks := connected_parts(F1, F2)
	{
		attribute<uint32>   nr_nodes    := sum(const(1, NodeSet, uint32), partnr);
		parameter<uint32>   MaxNrNodex  := max(networks/nr_nodes);
		parameter<networks> main        := rlookup(MaxNrNodex, nr_nodes); // we gaan ervan uit dat het netwerk met de meeste nodes het hoofd netwerk is
	}
	unit<uint32> NodesNotConnected := Subset(networks/partnr <> networks/main)
	{
		attribute<geometries/rdc> point := NodeSet/Values[Nr_OrgEntity];
	}
	
	unit<uint32> result := Subset(Linkset/isConnected)
	,	DialogType = "Map"
	,	DialogData = "line"
	{
		attribute<geometries/rdc>              line (arc)         := Linkset/Segments[nr_OrgEntity];
		attribute<classifications/OSM/wegtype> wegtype            := Linkset/wegtype[nr_OrgEntity];
		attribute<km_hr>                       maxspeed           := Linkset/maxspeed[nr_OrgEntity];
		attribute<km_hr>                       MorningRush_speed  := Linkset/MorningRush_speed[nr_OrgEntity];
		attribute<float32>                     MorningRush_flow   := Linkset/MorningRush_flow[nr_OrgEntity];
		attribute<km_hr>                       NoonRush_speed     := Linkset/NoonRush_speed[nr_OrgEntity];
		attribute<float32>                     NoonRush_flow      := Linkset/NoonRush_flow[nr_OrgEntity];
	}
}