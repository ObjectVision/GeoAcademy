container NetworkSetup : using = "units;SourceData;Classifications"
{  
	container Configuration
	{
		unit<uint32>         PC4   := SourceData/RegioIndelingen/PC4_punten/sub;
		
		unit<uint32> org := =ModelParameters/Orgset
		, DialogData = "point"
		, DialogType = "map" 
		{
			attribute<rdc>                   point          := =ModelParameters/Orgset+'/point';
			attribute<string>                name           := =ModelParameters/Orgset+'/name', DialogType = "LabelText";
		}
		
		unit<uint32> dest := ='SourceData/'+ModelParameters/Destset+'/HasValues' 
		, DialogData = "point"
		, DialogType = "map" 
		{
			attribute<uint32>                nr_values      := ='SourceData/'+ModelParameters/Destset+'/HasValues/nr_values';
			attribute<rdc>                   point          := ='SourceData/'+ModelParameters/Destset+'/HasValues/point';
			attribute<string>                name           := ='SourceData/'+ModelParameters/Destset+'/HasValues/id_name', DialogType = "LabelText";
		}
		
		unit<uint32> stops := SourceData/GTFS/StudyAreaFeeds/Stops;
		
		container RoadNets_Org2Dest_W   := templates/createNetwork(Org  , Dest    , SourceData/OSM/Result, 'Walking', 'Org2Dest');
		container RoadNets_Org2Stop_W   := templates/createNetwork(Org  , Stops   , SourceData/OSM/Result, 'Walking', 'Org2Stop');
		container RoadNets_Stop2Dest_W  := templates/createNetwork(Stops, Dest    , SourceData/OSM/Result, 'Walking', 'Stop2Dest');
		container RoadNets_Org2Dest_B   := templates/createNetwork(Org  , Dest    , SourceData/OSM/Result, 'Biking',  'Org2Dest');
		container RoadNets_Org2Stop_B   := templates/createNetwork(Org  , Stops   , SourceData/OSM/Result, 'Biking',  'Org2Stop');
		container RoadNets_Stop2Dest_B  := templates/createNetwork(Stops, Dest    , SourceData/OSM/Result, 'Biking',  'Stop2Dest');
		
		container CreateODconnections : using = "/SourceData/GTFS/StaticNets"
		{
			container Sparse_uitwerking_Org2Stop_W
			{
				unit<uint32> OD_path := RoadNets_Org2Stop_W/Network/ODMatrix;
				unit<uint32> AB := join_equal_values_uint32(OD_path/EindRef, ScheduledSpaceTimeEvents/stopRef)
				{
					attribute<Stops>                      Stop_rel          := X_rel;
					attribute<OD_path>                    OD_rel            := first_rel;
					attribute<ScheduledSpaceTimeEvents>   SSTE_rel          := second_rel;
					
					attribute<allLinks/Places>            Place_rel         := stops/PlaceRef[Stop_rel];
					attribute<Org>                        Org_rel           := OD_path/StartRef[OD_rel];
					attribute<rdc>    		              geometry (arc)    := OD_path/geometry[OD_rel];
					
					attribute<Time>                       Duration_Walk     := OD_path/Duration[OD_rel];
					attribute<m>                          Distance          := OD_path/Distance[OD_rel];
					attribute<Time>                       FromTime_Walk     := toTime_Walk[int32] - Duration_Walk[int32] > 0i
																				? toTime_Walk - Duration_Walk 
																				: (toTime_Walk[int32] - Duration_Walk[int32] + (#Time / 2)[int32])[uint32];
					attribute<Time>                       toTime_Walk       := ScheduledSpaceTimeEvents/TimeRef[SSTE_rel];
					attribute<string>                     LabelText         := OD_path/labeltext[OD_rel], DialogType = "LabelText";
					
					attribute<upoint>                     MomentxPlace      := point_xy(toTime_Walk, Place_rel, upoint);
					attribute<allLinks/NodeSet>           NodeRef           := rlookup(MomentxPlace, allLinks/NodeSet/values);
					
					unit<uint32> uq_stops := unique(Place_rel)
					{
						attribute<allLinks/Places> UsedStops := values;
					}
				}
			}
			
			container Sparse_uitwerking_Org2Stop_B
			{
				unit<uint32> OD_path := RoadNets_Org2Stop_B/Network/ODMatrix;
				unit<uint32> AB := join_equal_values_uint32(OD_path/EindRef, ScheduledSpaceTimeEvents/stopRef)
				{
					attribute<Stops>                      Stop_rel          := X_rel;
					attribute<OD_path>                    OD_rel            := first_rel;
					attribute<ScheduledSpaceTimeEvents>   SSTE_rel          := second_rel;
					
					attribute<allLinks/Places>            Place_rel         := stops/PlaceRef[Stop_rel];
					attribute<Org>                        Org_rel           := OD_path/StartRef[OD_rel];
					attribute<rdc>    		              geometry (arc)        := OD_path/geometry[OD_rel];
					
					attribute<Time>                       Duration_Bike     := (Distance / ModelParameters/Advanced/BikingSpeed)[Time];
					attribute<m>                          Distance          := OD_path/Distance[OD_rel];
					attribute<Time>                       FromTime_Bike     := toTime_Bike[int32] - Duration_Bike[int32] > 0i
																				? toTime_Bike - Duration_Bike 
																				: (toTime_Bike[int32] - Duration_Bike[int32] + (#Time / 2)[int32])[uint32];
					attribute<Time>                       toTime_Bike       := ScheduledSpaceTimeEvents/TimeRef[SSTE_rel];
					attribute<string>                     LabelText         := OD_path/labeltext[OD_rel], DialogType = "LabelText";
					
					attribute<upoint>                     MomentxPlace      := point_xy(toTime_Bike, Place_rel, upoint);
					attribute<allLinks/NodeSet>           NodeRef           := rlookup(MomentxPlace, allLinks/NodeSet/values);
					
					unit<uint32> uq_stops := unique(Place_rel)
					{
						attribute<allLinks/Places> UsedStops := values;
					}
				}
			}
			
			container Sparse_uitwerking_Stop2Dest_W
			{
				unit<uint32> OD_path := RoadNets_Stop2Dest_W/Network/ODMatrix;
				unit<uint32> AB := join_equal_values_uint32(OD_path/StartRef, ScheduledSpaceTimeEvents/stopRef)
				{
					attribute<Stops>                      Stop_rel          := X_rel;
					attribute<OD_path>                    OD_rel            := first_rel;
					attribute<ScheduledSpaceTimeEvents>   SSTE_rel          := second_rel;
					
					attribute<allLinks/Places>            Place_rel         := stops/PlaceRef[Stop_rel];
					attribute<Dest>                       Dest_rel          := OD_path/EindRef[OD_rel];
					attribute<rdc>    		              geometry (arc)    := OD_path/geometry[OD_rel];
					
					attribute<Time>                       Duration_Walk     := OD_path/Duration[OD_rel] > #Time / 2
																				? #Time / 2
																				: OD_path/Duration[OD_rel];
					attribute<m>                          Distance          := OD_path/Distance[OD_rel];
					attribute<Time>                       FromTime_Walk     := ScheduledSpaceTimeEvents/TimeRef[SSTE_rel];
					attribute<Time>                       ToTime_Walk       := FromTime_Walk + Duration_Walk > #Time
																				? FromTime_Walk + Duration_Walk - #Time
																				: FromTime_Walk + Duration_Walk;
					attribute<string>                     LabelText         := OD_path/labeltext[OD_rel], DialogType = "LabelText";
					
					attribute<upoint>                     MomentxPlace      := point_xy(FromTime_Walk, Place_rel, upoint);
					attribute<allLinks/NodeSet>           NodeRef           := rlookup(MomentxPlace, allLinks/NodeSet/values);
					
					unit<uint32> uq_stops := unique(Place_rel)
					{
						attribute<allLinks/Places> UsedStops := values;
					}
				}
			}
			
			container Sparse_uitwerking_Stop2Dest_B
			{
				unit<uint32> OD_path := RoadNets_Stop2Dest_B/Network/ODMatrix;
				unit<uint32> AB := join_equal_values_uint32(OD_path/StartRef, ScheduledSpaceTimeEvents/stopRef)
				{
					attribute<Stops>                      Stop_rel          := X_rel;
					attribute<OD_path>                    OD_rel            := first_rel;
					attribute<ScheduledSpaceTimeEvents>   SSTE_rel          := second_rel;
					
					attribute<allLinks/Places>            Place_rel         := stops/PlaceRef[Stop_rel];
					attribute<Dest>                       Dest_rel          := OD_path/EindRef[OD_rel];
					attribute<rdc>    		              geometry (arc)    := OD_path/geometry[OD_rel];
					
					attribute<Time>                       Duration_Bike     := (Distance / ModelParameters/Advanced/BikingSpeed)[Time];
					attribute<m>                          Distance          := OD_path/Distance[OD_rel];
					attribute<Time>                       FromTime_Bike     := ScheduledSpaceTimeEvents/TimeRef[SSTE_rel];
					attribute<Time>                       ToTime_Bike       := FromTime_Bike + Duration_Bike > #Time
																				? FromTime_Bike + Duration_Bike - #Time
																				: FromTime_Bike + Duration_Bike;
					attribute<string>                     LabelText         := OD_path/labeltext[OD_rel], DialogType = "LabelText";
					
					attribute<upoint>                     MomentxPlace      := point_xy(FromTime_Bike, Place_rel, upoint);
					attribute<allLinks/NodeSet>           NodeRef           := rlookup(MomentxPlace, allLinks/NodeSet/values);
					
					unit<uint32> uq_stops := unique(Place_rel)
					{
						attribute<allLinks/Places> UsedStops := values;
					}
				}
			}
		}
		
		#include<PublicTransport.dms>
	}
}
