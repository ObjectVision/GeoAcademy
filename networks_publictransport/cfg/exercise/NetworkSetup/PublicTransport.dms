container PublicTransport : using = "Units;ModelParameters"
{
	container PerMeasureMoment := 
		for_each_ne(
			Advanced/MeasureMoments/Name
			, 'GetPublicTransport('+string(Advanced/MeasureMoments/Moment)+', '+quote(Advanced/MeasureMoments/name)+')'
		)
	{
		unit<uint64> Combine_OrgDest        := combine_uint64(Org, Dest)
		{
			attribute<string> OrgName  := Org/name[first_rel];
			attribute<string> DestName := Dest/name[second_rel];
			attribute<string> Label    := OrgName +'_'+DestName, DialogType = "LabelText";
		}
	}
	
	Template GetPublicTransport 
	{ 
		parameter<uint32> 	inTime;
		parameter<string> 	inTime_string;
		
		unit<uint32>        Static_net := SourceData/GTFS/StaticNets/Static_net;
		unit<uint32>        Stops      := SourceData/GTFS/StaticNets/Stops;
		unit<uint32>        NodeSet    := SourceData/GTFS/StaticNets/Static_net/NodeSet;
		unit<uint32>        Places     := SourceData/GTFS/StaticNets/allLinks/Places;
		
		unit<uint32>        Org2Stop_W        := CreateODconnections/Sparse_uitwerking_Org2Stop_W/AB;
		unit<uint32>        Stop2Dest_W       := CreateODconnections/Sparse_uitwerking_Stop2Dest_W/AB;
		unit<uint32>        Org2Stop_B        := CreateODconnections/Sparse_uitwerking_Org2Stop_B/AB;
		unit<uint32>        Stop2Dest_B       := CreateODconnections/Sparse_uitwerking_Stop2Dest_B/AB;
		unit<uint64>        Combine_OrgDest := PerMeasureMoment/Combine_OrgDest;
		
		container TransitionTypes := 
			for_each_ne(
				Advanced/TransitionType_list/TypeMode
				, 'Transition_T('+inTime_string+'/'+string(Advanced/TransitionType_list/TypeMode)+', '+quote(Advanced/TransitionType_list/TypeMode)+', '+quote(Advanced/TransitionType_list/Mode)+', '+string(Advanced/TransitionType_list/ModeMax)+', '+quote(Advanced/TransitionType_list/FromTime)+', '+quote(Advanced/TransitionType_list/ToTime)+', '+quote(Advanced/TransitionType_list/OrgDest)+')'
			);
		
		Template Transition_T
		{
			unit<uint32>      OD_unit;
			parameter<string> OD_unit_name;
			parameter<string> Mode;
			parameter<Time>   ModeMax;
			parameter<string> FromTime_str;
			parameter<string> ToTime_str;
			parameter<string> OrgDest;
			
			parameter<string>   Arrive_at_time_CalcStr     := replace('subset(UNIT/FT >= inTime[Time] - (0.25f * #Time[float32])[uint32] && UNIT/TT <= inTime[Time] && UNIT/FT <= inTime[Time] && UNIT/duration_TM <= MM && UNIT/FT < inTime[Time] + (0.25f * #Time[float32])[uint32])','UNIT',OD_unit_name,'FT',FromTime_str,'TT', ToTime_str,'TM',Mode,'MM', string(ModeMax));
			parameter<string>   Departure_at_time_CalcStr  := replace('subset(UNIT/FT >= inTime[Time] && UNIT/TT >= inTime[Time] && UNIT/duration_TM <= MM && UNIT/FT < inTime[Time] + (#Time / 4)[uint32])','UNIT',OD_unit_name,'FT',FromTime_str,'TT', ToTime_str,'TM',Mode,'MM', string(ModeMax));
			parameter<string>   CalcStr  := ModelParameters/Arrival_or_Departure_at_time == 'Arrival'
																	? Arrive_at_time_CalcStr
																	: Departure_at_time_CalcStr;

			unit<uint32> Transition := =CalcStr
			{
				attribute<Org>                        Org_rel           := ='OD_unit/'+OrgDest+'_rel[nr_OrgEntity]';
				attribute<Dest>                       Dest_rel          := ='OD_unit/'+OrgDest+'_rel[nr_OrgEntity]';
				attribute<Stops>                      Stop_rel          := OD_unit/Stop_rel[nr_OrgEntity];
				attribute<Places>                     Place_rel         := OD_unit/Place_rel[nr_OrgEntity];
				attribute<geometries/rdc>             geometry (arc)    := OD_unit/geometry[nr_OrgEntity];
				attribute<m>                          Distance          := OD_unit/Distance[nr_OrgEntity];
				attribute<Time>                       Duration          := ='OD_unit/Duration_'+Mode+'[nr_OrgEntity]';
				attribute<Time>                       FromTime          := ='OD_unit/'+FromTime_str+'[nr_OrgEntity]';
				attribute<Time>                       toTime            := ='OD_unit/'+ToTime_str+'[nr_OrgEntity]';
				attribute<string>                     LabelText         := OD_unit/LabelText[nr_OrgEntity], DialogType = "LabelText";
				attribute<upoint>                     MomentxPlace_O2S  := point_xy(toTime, Place_rel, upoint);
				attribute<upoint>                     MomentxPlace_S2D  := point_xy(FromTime, Place_rel, upoint);
				attribute<NodeSet>                    NodeRef_O2S       := rlookup(MomentxPlace_O2S, NodeSet/values);
				attribute<NodeSet>                    NodeRef_S2D       := rlookup(MomentxPlace_S2D, NodeSet/values);
			}
		}

		container CreateODs
		{
			unit<uint32> StaticNet_subset_debug := Static_net
			{
				attribute<bool>   IsSub_from := =ModelParameters/Arrival_or_Departure_at_time == 'Arrival' ? 'FromTime > (inTime - convert(ModelParameters/MaxOVTime, s_f)[Time] - convert(ModelParameters/MaxWalkingTime_Org2Stop , s_f)[Time])' : 'FromTime >= inTime' ;
				attribute<bool>   IsSub_to   := =ModelParameters/Arrival_or_Departure_at_time == 'Arrival' ? 'ToTime <= inTime' : 'ToTime   < (inTime + convert(ModelParameters/MaxOVTime, s_f)[Time] + convert(ModelParameters/MaxWalkingTime_Org2Stop , s_f)[Time])' ;
				attribute<bool>   IsSub_dur  := duration <= convert(ModelParameters/MaxOVTime , s_f) * 2f;
			}
		
			unit<uint32> StaticNet_subset := select_with_attr_by_cond(SourceData/GTFS/StaticNets/Static_net, StaticNet_subset_debug/IsSub_from && StaticNet_subset_debug/IsSub_to && StaticNet_subset_debug/IsSub_dur);
		
			//// CREATE OD ////
			unit<uint64> OD_traveltime_W_OV_W := 
				dijkstra_m64('directed;startPoint(Node_rel,impedance,OrgZone_rel);endPoint(Node_rel,impedance,DstZone_rel);cut(OrgZone_max_imp);od:impedance,OrgZone_rel,DstZone_rel'
					, StaticNet_subset/Duration[float32]
					, StaticNet_subset/F1
					, StaticNet_subset/F2
					
					, TransitionTypes/Org2Stop_W/Transition/NodeRef_O2S, TransitionTypes/Org2Stop_W/Transition/Duration[float32], TransitionTypes/Org2Stop_W/Transition/Org_rel     //sP node_rel, impedance, OrgZone_rel
					, TransitionTypes/Stop2Dest_W/Transition/NodeRef_S2D, TransitionTypes/Stop2Dest_W/Transition/Duration[float32], TransitionTypes/Stop2Dest_W/Transition/Dest_rel //eP node_rel, impedance, DstZone_rel
					, ModelParameters/MaxOVTime
				)
			{
				attribute<float32>          traveltime_min               := impedance / 60f;
				attribute<Combine_OrgDest>  OD_nummer                    := combine_data(Combine_OrgDest, OrgZone_rel, DstZone_rel);
				attribute<UniqueOD>         UniqueOD_rel                 := rlookup(OD_nummer, UniqueOD/OD_nummer);
				attribute<string>           ModeUsed                     := const('W_OV_W',.);
				
				attribute<float32>          values                       := dest/nr_values[float32][DstZone_rel];
				attribute<float32>          decay_function               := traveltime_min == 0f ? 1f : 1f / (1f + exp(ov_a + ov_b*log(traveltime_min) + ov_c*traveltime_min));
				attribute<float32>          values_decayed               := MakeDefined(values * decay_function,0f);
				
				unit<uint64> UniqueOD := select_with_org_rel(IsDefined(OD_nummer))
				{
					attribute<float32>          Best_nr_items_of_interest_decayed   := ../values_decayed[org_rel];
					attribute<float32>          Best_nr_items_of_interest           := ../values[org_rel];
					attribute<float32>          ShortestTraveltime                  := ../traveltime_min[org_rel];
					attribute<string>           ModeUsed                            := ../ModeUsed[org_rel];
					attribute<Combine_OrgDest>  OD_nummer                           := ../OD_nummer[org_rel];
					attribute<string>           OrgName                             := Combine_OrgDest/OrgName[od_nummer];
					attribute<string>           DestName                            := Combine_OrgDest/DestName[od_nummer];
				}
			}
			
			// unit<uint64> OD_traveltime_B_OV_W_with_BB := union_unit_uint64(OD_traveltime_B_OV_W, OD_traveltime_B_B)
			// {
				// attribute<float32>          traveltime_min               := union_data(., OD_traveltime_B_OV_W/traveltime_min, OD_traveltime_B_B/traveltime_min);
				// attribute<float32>          values_decayed               := union_data(., OD_traveltime_B_OV_W/values_decayed, OD_traveltime_B_B/values_decayed);
				// attribute<float32>          values                       := union_data(., OD_traveltime_B_OV_W/values        , OD_traveltime_B_B/values);
				// attribute<Combine_OrgDest>  OD_nummer                    := union_data(., OD_traveltime_B_OV_W/OD_nummer,     OD_traveltime_B_B/OD_nummer);
				// attribute<UniqueOD>         UniqueOD_rel                 := rlookup(OD_nummer, UniqueOD/values);
				// attribute<string>           ModeUsed                     := union_data(., OD_traveltime_B_OV_W/ModeUsed, OD_traveltime_B_B/ModeUsed);
				
				// attribute<float32>          values_reached_decayed (Org) := sum(UniqueOD/Best_nr_items_of_interest_decayed, value(UniqueOD/values / uint64(#dest), org));
				// attribute<float32>          values_reached (Org)         := sum(UniqueOD/Best_nr_items_of_interest, value(UniqueOD/values / uint64(#dest), org));
				
				// attribute<string>           Reistijd_key                 := ModeUsed +'_'+ string(traveltime_min);
				// parameter<string>           Mode1 := 'B_OV_W';
				// parameter<string>           Mode2 := 'BB';
			
				// unit<uint64> UniqueOD := unique(OD_nummer)
				// {
					// attribute<float32>      Best_nr_items_of_interest_decayed := max(../values_decayed, ../UniqueOD_rel);
					// attribute<float32>      Best_nr_items_of_interest         := max(../values, ../UniqueOD_rel);
					// attribute<float32>      ShortestTraveltime                := min(../traveltime_min, ../UniqueOD_rel);
					// attribute<bool>         ArgMin1                           := IsDefined(rlookup(Mode1+'_'+string(ShortestTraveltime), Reistijd_key));
					// attribute<bool>         ArgMin2                           := IsDefined(rlookup(Mode2+'_'+string(ShortestTraveltime), Reistijd_key));
					// attribute<string>       ModeUsed                          := ArgMin1 ? Mode1 : ArgMin2 ? Mode2 : '';
					// attribute<string>       OrgName                           := Combine_OrgDest/OrgName[values];
					// attribute<string>       DestName                          := Combine_OrgDest/DestName[values];
				// }
			// }
			
			container CreateExports :=
				for_each_ne(
					ModelParameters/Advanced/Export_CombinationTypes/name
					, 'CreateExports_T('+quote(ModelParameters/Advanced/Export_CombinationTypes/name)+')'
				);
			
			Template CreateExports_T
			{
				parameter<string>  TypeName;
				
				unit<uint64>       domain                                        := ='OD_traveltime_'+TypeName;
				unit<uint64>       domain_UniqueOD                               := ='OD_traveltime_'+TypeName+'/UniqueOD';
				attribute<string>  ShortestTraveltime_min (domain_UniqueOD)      := string(domain_UniqueOD/ShortestTraveltime); //Convert the impedance from seconds to minutes, and store it as a string value.
				attribute<string>  ModeUsed               (domain_UniqueOD)      := domain_UniqueOD/ModeUsed; //Convert the impedance from seconds to minutes, and store it as a string value.
				
				container LongFormat
				{
					attribute<string>  BodyLines_fullOD (domain_UniqueOD) := domain_UniqueOD/OrgName + ';' + domain_UniqueOD/DestName + ';' + ShortestTraveltime_min + ';' + ModeUsed;
					parameter<string>  File_fullOD                        := 'OrgName;DestName;Traveltime_m_'+inTime_string+';ModeUsed_'+inTime_string+'\n'++AsList(BodyLines_fullOD, '\n'), StorageName = "=fileNamePrefix+'Traveltime_Long_'+TypeName+''+fileNameSuffix +'.csv'", StorageType = "str";
				}
				
				container WideFormat
				{
					unit<uint64> Complete_OrgDest := Combine_OrgDest
					{
						attribute<float32> ShortestTraveltime_min := rjoin(id(.), domain_UniqueOD/OD_nummer, domain_UniqueOD/ShortestTraveltime);  //Convert the impedance from seconds to minutes, and store it as a string value. 60f
					}
					
					unit<uint32> Matrix_Array := org
					{
						attribute<string> org_name           := org/name;
						attribute<string> impedance_list := AsList(string(MakeDefined(Complete_OrgDest/ShortestTraveltime_min, -1f)), ';', Complete_OrgDest/first_rel);
					}

					unit<uint32> Header : nrofrows = 1
					{
						attribute<string> dest_name          := AsList(Complete_OrgDest/DestName, ';', const(0[Header],Complete_OrgDest));
					}

					unit<uint32> Matrix_met_header := union_unit(Header, Matrix_Array) //This unit can easily be exported to csv and used in other applications.
					{
						attribute<string> org_name           := union_data(., const('',Header), Matrix_Array/org_name);
						attribute<string> values             := union_data(., Header/dest_name, replace(Matrix_Array/impedance_list,'-1',''));
					}
					
					attribute<string>  BodyLines_fullOD (Matrix_met_header) := Matrix_met_header/org_name + ';' + Matrix_met_header/values;
					parameter<string>  File_fullOD                          := AsList(BodyLines_fullOD, '\n'), StorageName = "=fileNamePrefix+'Traveltime_Wide_'+TypeName+''+fileNameSuffix +'.csv'", StorageType = "str";
				}
				
				parameter<string> fileNamePrefix := ModelParameters/Advanced/fileNamePrefix;
				parameter<string> fileNameSuffix :=  
					'_' + ModelParameters/AnalysisDate + 
					'_' + ModelParameters/Arrival_or_Departure_at_time + 
					'_' + inTime_string + 
					'_ORG-'    + ModelParameters/Orgset + 
					'_DEST-'   + ModelParameters/Advanced/DestSet_string +
					'_O2SWtime-' + string(ModelParameters/MaxWalkingTime_Org2Stop)+'min';// +
			}
		}
	}
}