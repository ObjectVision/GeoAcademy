container GeoDMS_Academy_Network_Car
{     
	container Units
	{
		unit<float32> m          := baseunit('m', float32) , label = "meter";
		unit<float32> km         := 1000f * m;
		unit<float32> s          := baseunit('s', float32) , label = "second";
		unit<float32> min        := 60.0 * s               , label = "minute";
		unit<float32> hr         := 60.0 * min             , label = "hour";
		unit<float32> m_s        := m / s                  , label = "meter per seconde";
		unit<float32> km_hr      := km / hr                , label = "kilometer per hour";
	}
	
	container classifications : using = "units"
	{
		#include <classifications.dms>
	}
	
	container Geography: Using = "Units"
	{
		unit<fpoint> rdc_base : SpatialReference   = "EPSG:28992", DialogData = "wmts_layer";
		unit<fpoint> rdc     := range(rdc_base, point_xy(x_min,y_min), point_xy(x_max,y_max));
		
		#include<wmts_layer.dms>
		
		parameter<m> x_min := 0[m];
		parameter<m> x_max := 280000[m];
		parameter<m> y_min := 300000[m];
		parameter<m> y_max := 625000[m];

		container grid_500m      := define_grid(500[m], .);


		template define_grid
		{
			// begin case parameters
			parameter<m> gridsize;
			container src;
			// end case parameters

			parameter<int16> nr_cols := int16((src/x_max - src/x_min) / gridsize);
			parameter<int16> nr_rows := int16((src/y_max - src/y_min) / gridsize);

			unit<spoint> domain :=
				range(
					 gridset(
						 rdc
						,point_xy(float32(gridsize), float32(-gridsize), rdc)
						,point_xy(src/x_min, src/y_max, rdc)
						,spoint
					)
					,point_xy(0s, 0s)
					,point_xy(nr_cols,nr_rows)
				)
			,	DialogData = "rdc";
		}

		container Impl_500m   := potrange_T(500[m],5000[m]);
		
		template potrange_T
		{
			parameter<m>   gridgrootte;
			parameter<m>   afkapstraal;
			//
			parameter<float32> straal       := afkapstraal / gridgrootte;
			unit<uint32>       Dist2Range;

			unit<spoint> potRange:= range(spoint, point_xy(-int16(straal), -int16(straal)), point_xy(int16(straal) + 1s, int16(straal) + 1s))
			{
				attribute<Dist2Range> distMatr        := dist2(point_xy(0s, 0s, .), Dist2Range);
				attribute<float32>    dist            := sqrt(float32(distMatr));
				attribute<float32>    rev_dist        := max_elem(straal - dist, 0f);
				parameter<float32>    rev_dist_max    := max(rev_dist);
				attribute<float32>    rev_dist_scaled := rev_dist / rev_dist_max;
			}
		}

		
	}
	
	container SourceData: Using = "Units;Geography"
	{
		unit<uint32> Inhabitants
		:	StorageName     = "%ProjDir%/Data/Inwoners_2019_500m.gpkg"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<rdc>    geometry;
			attribute<string> label;
			attribute<int32>  Inhabitants_2019;
			attribute<string> name := label;
		}
		
		unit<uint32> Train_stations
		:	StorageName = "%ProjDir%/Data/IC_Stations_2019.gpkg"
		,	StorageType = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<rdc>     geometry;
			attribute<string>  label;
			attribute<string>  name := replace(label, '-', '_', '/', '');
		}
		
		unit<uint32> Car_network
		:	StorageName = "%ProjDir%/Data/car_network_20210803_NL.gpkg"
		,	StorageType = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<rdc>                          geometry (arc);
			attribute<classifications/OSM/roadtype> roadtype;
			attribute<km_hr>                        max_speed;
		}
	}	
	
	#include <results.dms>
	#include <templates.dms>
}