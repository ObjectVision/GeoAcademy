container Analysis : Using = "Units;SourceData;Geography"
{
	unit<uint32> org     := SourceData/Train_stations;
	unit<uint32> dest    := SourceData/Inhabitants;
	unit<uint32> network := SourceData/Car_network;
	
	parameter<s>      MaxTravelTime  := 1800[s]; // 1800 seconds is 30 minutes
	parameter<float32> MaxInhabitants := 10000f; 
	
	container NetworkSpec :=
		Templates/MakeNetwork(
			  org
			, dest
			, network
			, org/geometry
			, dest/geometry
			, network/geometry
			, 'car'
		);
		
	unit<uint64> Dijkstra_cut := 
		dijkstra_m64('bidirectional(link_flag);startPoint(Node_rel);endPoint(Node_rel);cut(OrgZone_max_imp);od:OrgZone_rel,DstZone_rel'
			, NetworkSpec/OrgToDest/impedance
			, NetworkSpec/OrgToDest/F1
			, NetworkSpec/OrgToDest/F2
			//////
			, NetworkSpec/OrgToDest/LinkSet/roadtype != classifications/OSM/roadtype/V/motorway  && NetworkSpec/OrgToDest/LinkSet/roadtype != classifications/OSM/roadtype/V/motorway_link // motor way en motor way link, snelwegen zijn niet bidirectional
			, NetworkSpec/OrgToDest/nr_orgNode
			, NetworkSpec/OrgToDest/nr_destNode
			, MaxTravelTime
		), FreeData = "false"
	{
		attribute<int32> Inhabitants           := dest/Inhabitants_2019[DstZone_rel];
		attribute<int32> Inhabitants_org (org) := sum(Inhabitants, OrgZone_rel);
	}
	
	unit<uint64> Dijkstra_fullOD := //calculation a full origin-destination matrix
		dijkstra_m64('bidirectional(link_flag);startPoint(Node_rel);endPoint(Node_rel);od:impedance,OrgZone_rel,DstZone_rel'
			, NetworkSpec/OrgToDest/impedance
			, NetworkSpec/OrgToDest/F1
			, NetworkSpec/OrgToDest/F2
			//
			, NetworkSpec/OrgToDest/LinkSet/roadtype != classifications/OSM/roadtype/V/motorway  && NetworkSpec/OrgToDest/LinkSet/roadtype != classifications/OSM/roadtype/V/motorway_link // motor way en motor way link, snelwegen zijn niet bidirectional
			, NetworkSpec/OrgToDest/nr_orgNode
			, NetworkSpec/OrgToDest/nr_destNode
		), FreeData = "false"
	{
		attribute<string> impedance_min := string(round(impedance / 60f)); //Convert the impedance from seconds to minutes, round it off, and store it as a string value.
		attribute<string> org_name      := org/name[OrgZone_rel];
		attribute<string> dest_name     := dest/name[DstZone_rel];
		
		unit<uint32> Matrix_Array := org
		{
			attribute<string> org_name           := org/label;
			attribute<string> impedance_min_list := AsList(impedance_min, ';', OrgZone_rel);
		}

		unit<uint32> Header : nrofrows = 1
		{
			attribute<string> values := AsList(dest/name, ';', const(0[Header],dest));
		}

		unit<uint32> Matrix_met_header := union_unit(Header, Matrix_Array) //This unit can easily be exported to csv and used in other applications.
		{
			attribute<string> org_name     := union_data(., const('',Header), Matrix_Array/org_name);
			attribute<string> values := union_data(., Header/values, Matrix_Array/impedance_min_list) ;
		}
	}
	
	unit<uint64> Dijkstra_limit :=
		dijkstra_m64('bidirectional(link_flag);startPoint(Node_rel):max_imp;endPoint(Node_rel);limit(OrgZone_max_mass,DstZone_mass)'
			, NetworkSpec/OrgToDest/impedance
			, NetworkSpec/OrgToDest/F1
			, NetworkSpec/OrgToDest/F2
			//
			, NetworkSpec/OrgToDest/LinkSet/roadtype != Classifications/osm/roadtype/V/motorway  && NetworkSpec/OrgToDest/LinkSet/roadtype != classifications/OSM/roadtype/V/motorway_link // motor way en motor way link, snelwegen zijn niet bidirectional
			, NetworkSpec/OrgToDest/nr_orgNode
			, NetworkSpec/OrgToDest/nr_destNode
			, MaxInhabitants, dest/Inhabitants_2019[float32]
		);
	
	container Dijkstra_nearest
	{
		attribute<float32> TraveltimeToNearestDest (NetworkSpec/OrgToDest/NodeSet) := 
			dijkstra_s('bidirectional(link_flag);startPoint(Node_rel)'
				, NetworkSpec/OrgToDest/impedance
				, NetworkSpec/OrgToDest/F1
				, NetworkSpec/OrgToDest/F2
				///
				, NetworkSpec/OrgToDest/LinkSet/roadtype != classifications/OSM/roadtype/v/motorway && NetworkSpec/OrgToDest/LinkSet/roadtype != classifications/OSM/roadtype/v/motorway_link
				, NetworkSpec/OrgToDest/nr_orgNode
			), KeepData = "true";
			
		attribute<float32> TraveltimeToNearestDest_perDest (dest)                  := TraveltimeToNearestDest[NetworkSpec/OrgToDest/nr_destNode];

		container Interpolate
		{
			attribute<float32> Sum_attribute    (grid_500m/domain) := sum(TraveltimeToNearestDest_perDest, dest/geometry[grid_500m/domain]);
			attribute<float32> Count_attribute  (grid_500m/domain) := sum(TraveltimeToNearestDest_perDest > 0f ? 1f : 0f , dest/geometry[grid_500m/domain]);
			attribute<float32> Potential_sum    (grid_500m/domain) := potential(Sum_attribute, /Geography/Impl_500m/potrange/rev_dist_scaled); 
			attribute<float32> Potential_count  (grid_500m/domain) := potential(Count_attribute, /Geography/Impl_500m/potrange/rev_dist_scaled);
			
			attribute<float32> Interpolated     (grid_500m/domain) := Potential_sum / Potential_count;
		}
	}
}